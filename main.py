import telebot
import requests
import json
import os
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from flask import Flask, request
import threading
import logging

# Consolidated imports from config
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configuration
BOT_TOKEN = os.getenv('BOT_TOKEN')
AI_API_KEY = os.getenv('AI_API_KEY', 'io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6IjBmMjc2NjJhLWVhMGUtNGRlZC05MDQ1LTcyNzJiNWI4ZjZlNyIsImV4cCI6NDkxMDI1MzU5Mn0.P1IFARUejNIkl9RbQ7Ynpp-CZZegzYo3ed7ynRGCBrgvWp6ZcaaSoIKUUMjBADlojgLmOQZXC6uMxagqrIsjew')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))

# AI API settings
AI_API_URL = "https://api.intelligence.io.solutions/api/v1/chat/completions"
AI_MODEL = "meta-llama/Llama-3.3-70B-Instruct"

# Railway settings
PORT = int(os.getenv('PORT', 5000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# Subscription settings
DAILY_FREE_MESSAGES = 20
SUBSCRIPTION_PLANS = {
    '1month': {'name': '1 –º–µ—Å—è—Ü', 'price': '200‚Ç¥', 'duration_days': 30},
    '6months': {'name': '6 –º–µ—Å—è—Ü–µ–≤', 'price': '1000‚Ç¥', 'duration_days': 180},
    '12months': {'name': '12 –º–µ—Å—è—Ü–µ–≤', 'price': '1800‚Ç¥', 'duration_days': 365},
    'lifetime': {'name': '–ù–∞–≤—Å–µ–≥–¥–∞', 'price': '3999‚Ç¥', 'duration_days': -1}
}

# –†–æ–ª–∏ AI
AI_ROLES = {
    'cortex': {'name': 'ü§ñ CortexaAI', 'prompt_file': 'prompts/cortex_standard.txt', 'description': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫'},
    'boy': {'name': 'üòé –ü–∞—Ä–µ–Ω—å', 'prompt_file': 'prompts/ai_boy.txt', 'description': '–ö—Ä—É—Ç–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä—É–≥'},
    'girl': {'name': 'üíï –î–µ–≤—É—à–∫–∞', 'prompt_file': 'prompts/ai_girl.txt', 'description': '–ú–∏–ª–∞—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–∂–∫–∞'},
    'hacker': {'name': 'üí∞ –¢–µ–º—â–∏–∫', 'prompt_file': 'prompts/ai_hacker.txt', 'description': '–õ—é—Ç—ã–π —Ç–µ–º—â–∏–∫'},
    'nerd': {'name': 'ü§ì –î—É—à–Ω–∏–ª–∞', 'prompt_file': 'prompts/ai_nerd.txt', 'description': '–£–º–Ω—ã–π –±–æ—Ç–∞–Ω–∏–∫-–≤—Å–µ–∑–Ω–∞–π–∫–∞'}
}

# Check required variables
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# Initialize bot
bot = telebot.TeleBot(BOT_TOKEN)

# Initialize Flask app for webhook
app = Flask(__name__)

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
print(f"ü§ñ –ü–æ—Ä—Ç –¥–ª—è –¥–µ–ø–ª–æ—è: {PORT}")
print(f"üîó Webhook URL: {WEBHOOK_URL}")


class AIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Intelligence.io API"""
    
    def __init__(self):
        self.api_url = AI_API_URL
        self.api_key = AI_API_KEY
        self.model = AI_MODEL
        self.headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}"
        }
        self.system_prompt = self.load_system_prompt()
        self.role_prompts = self.load_role_prompts()
    
    def load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        try:
            with open('system_prompt.txt', 'r', encoding='utf-8') as f:
                prompt = f.read().strip()
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
            return prompt
        except FileNotFoundError:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª system_prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
            return "–¢—ã —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ –∏ —Å —ç–º–æ–¥–∑–∏."
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ system_prompt.txt: {str(e)}")
            return "–¢—ã —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ –∏ —Å —ç–º–æ–¥–∑–∏."
    
    def load_role_prompts(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π"""
        prompts = {}
        for role_key, role_info in AI_ROLES.items():
            try:
                with open(role_info['prompt_file'], 'r', encoding='utf-8') as f:
                    prompts[role_key] = f.read().strip()
                logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–æ–ª–∏ {role_key} –∑–∞–≥—Ä—É–∂–µ–Ω")
            except FileNotFoundError:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–æ–ª–∏ {role_key} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                prompts[role_key] = self.system_prompt
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ {role_key}: {str(e)}")
                prompts[role_key] = self.system_prompt
        return prompts
    
    def get_role_prompt(self, role: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª–∏"""
        return self.role_prompts.get(role, self.system_prompt)
    
    def chat_completion(self, messages: List[Dict[str, str]], user_role: str = 'cortex', include_system: bool = True) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ AI API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        try:
            full_messages = []
            
            if include_system:
                role_prompt = self.get_role_prompt(user_role)
                full_messages.append({
                    "role": "system",
                    "content": role_prompt
                })
            
            full_messages.extend(messages)
            
            data = {
                "model": self.model,
                "messages": full_messages,
                "max_tokens": 2000,
                "temperature": 0.7
            }
            
            response = requests.post(
                self.api_url, 
                headers=self.headers, 
                json=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if 'choices' in result and len(result['choices']) > 0:
                    return result['choices'][0]['message']['content']
                else:
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {result}")
                    return "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI"
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return f"ü§ñ –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞: {response.status_code}"
                
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ AI API")
            return "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, AI —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
        except requests.exceptions.ConnectionError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI API")
            return "ü§ñ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI —Å–µ—Ä–≤–∏—Å—É."
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return "ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."


class UserManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    
    def __init__(self):
        self.data_file = "users_data.json"
        self.ensure_data_file()
    
    def ensure_data_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        if not os.path.exists(self.data_file):
            self.save_data({})
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {self.data_file}")
    
    def load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return {}
    
    def save_data(self, data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except IOError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return False
    
    def get_user(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = self.load_data()
        user_key = str(user_id)
        
        if user_key not in data:
            data[user_key] = self.create_default_user(user_id)
            self.save_data(data)
        
        return data[user_key]
    
    def create_default_user(self, user_id: int) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        now = datetime.now()
        return {
            "user_id": user_id,
            "username": None,
            "first_name": None,
            "last_name": None,
            "registration_date": now.isoformat(),
            "last_activity": now.isoformat(),
            "daily_messages": 0,
            "last_message_date": now.strftime("%Y-%m-%d"),
            "ai_role": "cortex",  # –†–æ–ª—å AI –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "subscription": {
                "type": "free",
                "expires_at": None,
                "unlimited": False
            },
            "statistics": {
                "total_messages": 0,
                "ai_requests": 0,
                "total_sessions": 0
            },
            "chat_history": []
        }
    
    def update_user_info(self, user_id: int, username: str = None, 
                        first_name: str = None, last_name: str = None) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        data = self.load_data()
        user_key = str(user_id)
        user = data.get(user_key, self.create_default_user(user_id))
        
        if username:
            user["username"] = username
        if first_name:
            user["first_name"] = first_name
        if last_name:
            user["last_name"] = last_name
        
        user["last_activity"] = datetime.now().isoformat()
        data[user_key] = user
        
        return self.save_data(data)
    
    def can_send_message(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user = self.get_user(user_id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if user["subscription"]["type"] != "free":
            if user["subscription"]["unlimited"]:
                return True
            
            expires_at = datetime.fromisoformat(user["subscription"]["expires_at"])
            if datetime.now() < expires_at:
                return True
            else:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                self.reset_subscription(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        today = datetime.now().strftime("%Y-%m-%d")
        if user["last_message_date"] != today:
            # –ù–æ–≤—ã–π –¥–µ–Ω—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            self.reset_daily_messages(user_id)
            return True
        
        return user["daily_messages"] < DAILY_FREE_MESSAGES
    
    def increment_message_count(self, user_id: int) -> bool:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        data = self.load_data()
        user_key = str(user_id)
        user = data.get(user_key, self.create_default_user(user_id))
        
        today = datetime.now().strftime("%Y-%m-%d")
        if user["last_message_date"] != today:
            user["daily_messages"] = 0
            user["last_message_date"] = today
        
        user["daily_messages"] += 1
        user["statistics"]["total_messages"] += 1
        user["statistics"]["ai_requests"] += 1
        user["last_activity"] = datetime.now().isoformat()
        
        data[user_key] = user
        return self.save_data(data)
    
    def reset_daily_messages(self, user_id: int) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        data = self.load_data()
        user_key = str(user_id)
        user = data.get(user_key, self.create_default_user(user_id))
        
        user["daily_messages"] = 0
        user["last_message_date"] = datetime.now().strftime("%Y-%m-%d")
        
        data[user_key] = user
        return self.save_data(data)
    
    def reset_subscription(self, user_id: int) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é"""
        data = self.load_data()
        user_key = str(user_id)
        user = data.get(user_key, self.create_default_user(user_id))
        
        user["subscription"] = {
            "type": "free",
            "expires_at": None,
            "unlimited": False
        }
        
        data[user_key] = user
        return self.save_data(data)
    
    def grant_subscription(self, user_id: int, plan_key: str) -> bool:
        """–í—ã–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if plan_key not in SUBSCRIPTION_PLANS:
            return False
        
        data = self.load_data()
        user_key = str(user_id)
        user = data.get(user_key, self.create_default_user(user_id))
        
        plan = SUBSCRIPTION_PLANS[plan_key]
        
        if plan['duration_days'] == -1:  # –ù–∞–≤—Å–µ–≥–¥–∞
            user["subscription"] = {
                "type": plan_key,
                "expires_at": None,
                "unlimited": True
            }
        else:
            expires_at = datetime.now() + timedelta(days=plan['duration_days'])
            user["subscription"] = {
                "type": plan_key,
                "expires_at": expires_at.isoformat(),
                "unlimited": False
            }
        
        data[user_key] = user
        return self.save_data(data)
    
    def revoke_subscription(self, user_id: int) -> bool:
        """–û—Ç–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = self.load_data()
        user_key = str(user_id)
        
        if user_key not in data:
            return False
        
        user = data[user_key]
        user["subscription"] = {
            "type": "free",
            "expires_at": None,
            "unlimited": False
        }
        
        data[user_key] = user
        return self.save_data(data)
    
    def add_bonus_messages(self, user_id: int, bonus_count: int = 10) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        data = self.load_data()
        user_key = str(user_id)
        user = data.get(user_key, self.create_default_user(user_id))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º –¥–æ 50 –≤ –¥–µ–Ω—å)
        current_messages = user.get('daily_messages', 0)
        max_daily = DAILY_FREE_MESSAGES + 40  # 20 –æ–±—ã—á–Ω—ã—Ö + 40 –±–æ–Ω—É—Å–Ω—ã—Ö –º–∞–∫—Å–∏–º—É–º
        
        if current_messages >= max_daily:
            return False  # –£–∂–µ –º–∞–∫—Å–∏–º—É–º
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
        available_to_add = max_daily - current_messages
        actual_bonus = min(bonus_count, available_to_add)
        
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
        user['daily_messages'] = max(0, current_messages - actual_bonus)
        
        data[user_key] = user
        return self.save_data(data) and actual_bonus > 0
    
    def grant_bonus_to_all_users(self, bonus_count: int = 10) -> int:
        """–ù–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        data = self.load_data()
        success_count = 0
        
        for user_id_str in data.keys():
            user_id = int(user_id_str)
            if self.add_bonus_messages(user_id, bonus_count):
                success_count += 1
        
        return success_count
    
    def add_to_history(self, user_id: int, role: str, content: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = self.load_data()
        user_key = str(user_id)
        user = data.get(user_key, self.create_default_user(user_id))
        
        message = {
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        }
        
        user["chat_history"].append(message)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(user["chat_history"]) > 100:
            user["chat_history"] = user["chat_history"][-100:]
        
        data[user_key] = user
        return self.save_data(data)
    
    def get_history_for_ai(self, user_id: int, limit: int = 20) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è AI API"""
        user = self.get_user(user_id)
        history = user.get("chat_history", [])
        
        recent_history = history[-limit:] if len(history) > limit else history
        
        ai_history = []
        for msg in recent_history:
            ai_history.append({
                "role": msg["role"],
                "content": msg["content"]
            })
        
        return ai_history
    
    def clear_history(self, user_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = self.load_data()
        user_key = str(user_id)
        user = data.get(user_key, self.create_default_user(user_id))
        
        user["chat_history"] = []
        data[user_key] = user
        
        return self.save_data(data)
    
    def set_ai_role(self, user_id: int, role: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å AI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if role not in AI_ROLES:
            return False
            
        data = self.load_data()
        user_key = str(user_id)
        user = data.get(user_key, self.create_default_user(user_id))
        
        user["ai_role"] = role
        user["last_activity"] = datetime.now().isoformat()
        data[user_key] = user
        
        return self.save_data(data)
    
    def get_ai_role(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_user(user_id)
        return user.get("ai_role", "cortex")
    
    def get_user_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_user(user_id)
        
        subscription_info = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"
        daily_usage = f"{user['daily_messages']}/{DAILY_FREE_MESSAGES}"
        
        if user["subscription"]["type"] != "free":
            plan = SUBSCRIPTION_PLANS.get(user["subscription"]["type"], {})
            if user["subscription"]["unlimited"]:
                subscription_info = f"‚ôæÔ∏è {plan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')} (–ù–∞–≤—Å–µ–≥–¥–∞)"
                daily_usage = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
            else:
                expires_at = datetime.fromisoformat(user["subscription"]["expires_at"])
                if datetime.now() < expires_at:
                    days_left = (expires_at - datetime.now()).days
                    subscription_info = f"üíé {plan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)"
                    daily_usage = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
                else:
                    subscription_info = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è (–∏—Å—Ç–µ–∫–ª–∞)"
                    daily_usage = f"{user['daily_messages']}/{DAILY_FREE_MESSAGES}"
        
        return {
            "user_info": {
                "username": user.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                "first_name": user.get("first_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                "registration_date": datetime.fromisoformat(user["registration_date"]).strftime("%d.%m.%Y"),
            },
            "activity": {
                "total_messages": user["statistics"]["total_messages"],
                "ai_requests": user["statistics"]["ai_requests"],
                "daily_messages": daily_usage,
                "last_activity": datetime.fromisoformat(user["last_activity"]).strftime("%d.%m.%Y %H:%M")
            },
            "subscription": subscription_info
        }


class SubscriptionManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    
    def __init__(self):
        self.payments_file = "pending_payments.json"
        self.ensure_payments_file()
    
    def ensure_payments_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ø–ª–∞—Ç–µ–∂–µ–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        if not os.path.exists(self.payments_file):
            self.save_payments({})
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ø–ª–∞—Ç–µ–∂–µ–π: {self.payments_file}")
    
    def load_payments(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            with open(self.payments_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}")
            return {}
    
    def save_payments(self, data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            with open(self.payments_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except IOError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}")
            return False
    
    def create_payment(self, user_id: int, plan_key: str, file_id: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"""
        payments = self.load_payments()
        
        payment_id = f"pay_{user_id}_{int(time.time())}"
        
        payments[payment_id] = {
            "user_id": user_id,
            "plan_key": plan_key,
            "file_id": file_id,
            "status": "pending",
            "created_at": datetime.now().isoformat(),
            "plan_info": SUBSCRIPTION_PLANS[plan_key]
        }
        
        self.save_payments(payments)
        return payment_id
    
    def approve_payment(self, payment_id: str) -> bool:
        """–û–¥–æ–±—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂"""
        payments = self.load_payments()
        
        if payment_id not in payments:
            return False
        
        payment = payments[payment_id]
        payment["status"] = "approved"
        payment["approved_at"] = datetime.now().isoformat()
        
        self.save_payments(payments)
        return True
    
    def reject_payment(self, payment_id: str) -> bool:
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂"""
        payments = self.load_payments()
        
        if payment_id not in payments:
            return False
        
        payment = payments[payment_id]
        payment["status"] = "rejected"
        payment["rejected_at"] = datetime.now().isoformat()
        
        self.save_payments(payments)
        return True
    
    def get_payment(self, payment_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ"""
        payments = self.load_payments()
        return payments.get(payment_id)


# Initialize managers
ai_client = AIClient()
user_manager = UserManager()
subscription_manager = SubscriptionManager()

# Track users currently waiting for AI response
active_ai_requests = set()

# Track admin pending actions (for reason input)
admin_pending_actions = {}

# Technical maintenance mode
maintenance_mode = False


# Inline keyboards
def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        telebot.types.InlineKeyboardButton("üí¨ –ß–∞—Ç —Å AI", callback_data="ai_chat"),
        telebot.types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        telebot.types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üé≠ –†–æ–ª–∏ AI", callback_data="ai_roles"),
        telebot.types.InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")
    )
    return markup


def get_ai_roles_menu(current_role: str = "cortex"):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π AI"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    for role_key, role_info in AI_ROLES.items():
        emoji = "‚úÖ" if role_key == current_role else "‚ñ´Ô∏è"
        markup.add(
            telebot.types.InlineKeyboardButton(
                f"{emoji} {role_info['name']}", 
                callback_data=f"set_role_{role_key}"
            )
        )
    
    markup.add(
        telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    return markup


def get_subscription_menu():
    """–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    for plan_key, plan_info in SUBSCRIPTION_PLANS.items():
        markup.add(
            telebot.types.InlineKeyboardButton(
                f"{plan_info['name']} - {plan_info['price']}", 
                callback_data=f"buy_{plan_key}"
            )
        )
    
    markup.add(
        telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    return markup


def get_confirm_clear_menu():
    """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        telebot.types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear"),
        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
    )
    return markup


def get_admin_payment_menu(payment_id: str):
    """–ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        telebot.types.InlineKeyboardButton("‚úÖ –í—ã–¥–∞—Ç—å", callback_data=f"approve_{payment_id}"),
        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{payment_id}")
    )
    return markup


def get_back_menu():
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")
    )
    return markup


def get_admin_menu():
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        telebot.types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list"),
        telebot.types.InlineKeyboardButton("üíé –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_grant_sub")
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üö´ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_revoke_sub"),
        telebot.types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments")
    )
    
    # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç
    maintenance_text = "üõ† –í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã" if maintenance_mode else "‚öôÔ∏è –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã"
    markup.add(
        telebot.types.InlineKeyboardButton(maintenance_text, callback_data="admin_toggle_maintenance")
    )
    
    return markup


def get_admin_users_menu(users_data, page=0):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 8 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start_idx = page * 8
    end_idx = start_idx + 8
    users_list = list(users_data.items())[start_idx:end_idx]
    
    for user_id, user_data in users_list:
        name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        username = user_data.get('username', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        subscription = user_data.get('subscription', {}).get('type', 'free')
        sub_emoji = "üÜì" if subscription == 'free' else "üíé"
        
        button_text = f"{sub_emoji} {name} (@{username})"
        markup.add(
            telebot.types.InlineKeyboardButton(
                button_text, 
                callback_data=f"select_user_{user_id}"
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    total_pages = (len(users_data) + 7) // 8
    
    if page > 0:
        nav_buttons.append(
            telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"users_page_{page-1}")
        )
    if page < total_pages - 1:
        nav_buttons.append(
            telebot.types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"users_page_{page+1}")
        )
    
    if nav_buttons:
        markup.row(*nav_buttons)
    
    markup.add(
        telebot.types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    )
    
    return markup


def get_admin_users_with_subs_menu(users_data, page=0):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
    users_with_subs = {k: v for k, v in users_data.items() 
                      if v.get('subscription', {}).get('type', 'free') != 'free'}
    
    if not users_with_subs:
        markup.add(
            telebot.types.InlineKeyboardButton("üö´ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="none")
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 8 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        start_idx = page * 8
        end_idx = start_idx + 8
        users_list = list(users_with_subs.items())[start_idx:end_idx]
        
        for user_id, user_data in users_list:
            name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            username = user_data.get('username', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            subscription = user_data.get('subscription', {}).get('type', 'free')
            sub_plan = SUBSCRIPTION_PLANS.get(subscription, {}).get('name', subscription)
            
            button_text = f"üíé {name} (@{username}) - {sub_plan}"
            markup.add(
                telebot.types.InlineKeyboardButton(
                    button_text, 
                    callback_data=f"revoke_select_{user_id}"
                )
            )
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        total_pages = (len(users_with_subs) + 7) // 8
        
        if page > 0:
            nav_buttons.append(
                telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"revoke_page_{page-1}")
            )
        if page < total_pages - 1:
            nav_buttons.append(
                telebot.types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"revoke_page_{page+1}")
            )
        
        if nav_buttons:
            markup.row(*nav_buttons)
    
    markup.add(
        telebot.types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    )
    
    return markup


def get_subscription_plans_menu(user_id):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    for plan_key, plan_info in SUBSCRIPTION_PLANS.items():
        markup.add(
            telebot.types.InlineKeyboardButton(
                f"{plan_info['name']} - {plan_info['price']}",
                callback_data=f"grant_plan_{user_id}_{plan_key}"
            )
        )
    
    markup.add(
        telebot.types.InlineKeyboardButton("üîô –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_grant_sub")
    )
    
    return markup


def get_buy_subscription_menu():
    """–ö–Ω–æ–ø–∫–∞ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("üíé –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscriptions")
    )
    return markup


# Bot handlers
@bot.message_handler(commands=['start'])
def start_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_manager.update_user_info(user_id, username, first_name, last_name)
    
    welcome_text = f"""
üéÜ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CortexaAI!</b>

üëã –ü—Ä–∏–≤–µ—Ç, <b>{first_name or '–¥—Ä—É–≥'}</b>!


üéÜ <b>–ú–û–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>

üí¨ <b>–£–º–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ:</b> Llama-3.3-70B AI
üé≠ <b>5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π:</b> –û—Ç –¥—Ä—É–≥–∞ –¥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
üìö <b>–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:</b> –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:</b> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏


üéÅ <b>–ë–ï–°–ü–õ–ê–¢–ù–û:</b>

‚úÖ {DAILY_FREE_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–æ–ª—è–º AI
‚úÖ –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞


üíé <b>–ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê:</b>

‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
üéÜ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7


üî• <b>–ù–ê–ß–ù–ò–¢–ï –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°!</b>
    """
    
    bot.send_message(
        message.chat.id, 
        welcome_text, 
        parse_mode='HTML', 
        reply_markup=get_main_menu()
    )
    
    logger.info(f"üëã –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")


@bot.message_handler(commands=['admin'])
def admin_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã"""
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    users_count = len(user_manager.load_data())
    pending_payments = len([p for p in subscription_manager.load_payments().values() if p['status'] == 'pending'])
    
    maintenance_status = "‚öôÔ∏è –ê–ö–¢–ò–í–ù–´" if maintenance_mode else "üõ† –û–¢–ö–õ–Æ–ß–ï–ù–´"
    
    admin_text = f"""
üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {users_count}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {pending_payments}
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã: {maintenance_status}

üõ†Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>
    """
    
    bot.send_message(message.chat.id, admin_text, parse_mode='HTML', reply_markup=get_admin_menu())


@bot.message_handler(commands=['stats'])
def stats_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    users_data = user_manager.load_data()
    pending_payments = len([p for p in subscription_manager.load_payments().values() if p['status'] == 'pending'])
    
    total_users = len(users_data)
    active_subscriptions = len([u for u in users_data.values() if u.get('subscription', {}).get('type') != 'free'])
    total_messages = sum(u.get('statistics', {}).get('total_messages', 0) for u in users_data.values())
    
    stats_text = f"""
üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: <b>{total_users}</b>
‚Ä¢ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{active_subscriptions}</b>
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: <b>{total_users - active_subscriptions}</b>

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{total_messages}</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{len(active_ai_requests)}</b>

üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{pending_payments}</b>

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>
    """
    
    bot.send_message(message.chat.id, stats_text, parse_mode='HTML')


@bot.message_handler(commands=['users'])
def users_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users"""
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    users_data = user_manager.load_data()
    
    if not users_data:
        bot.send_message(message.chat.id, "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</b>", parse_mode='HTML')
        return
    
    users_text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
    
    for user_id, user_data in list(users_data.items())[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
        name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        username = user_data.get('username', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        subscription = user_data.get('subscription', {}).get('type', 'free')
        messages = user_data.get('statistics', {}).get('total_messages', 0)
        
        sub_emoji = "üÜì" if subscription == 'free' else "üíé"
        
        users_text += f"‚Ä¢ <b>{name}</b> (@{username})\n"
        users_text += f"   ID: <code>{user_id}</code>\n"
        users_text += f"   {sub_emoji} {subscription} | üí¨ {messages} —Å–æ–æ–±—â.\n\n"
    
    if len(users_data) > 10:
        users_text += f"<i>... –∏ –µ—â–µ {len(users_data) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>"
    
    bot.send_message(message.chat.id, users_text, parse_mode='HTML')


@bot.message_handler(commands=['grant'])
def grant_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /grant"""
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /grant user_id plan
        parts = message.text.split()
        if len(parts) != 3:
            bot.send_message(
                message.chat.id,
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/grant user_id plan</code>\n\n–ü–ª–∞–Ω—ã: 1month, 6months, 12months, lifetime",
                parse_mode='HTML'
            )
            return
        
        target_user_id = int(parts[1])
        plan_key = parts[2]
        
        if plan_key not in SUBSCRIPTION_PLANS:
            bot.send_message(
                message.chat.id,
                f"‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω!</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(SUBSCRIPTION_PLANS.keys())}",
                parse_mode='HTML'
            )
            return
        
        # –í—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if user_manager.grant_subscription(target_user_id, plan_key):
            plan_info = SUBSCRIPTION_PLANS[plan_key]
            
            success_text = f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞!</b>\n\n"
            success_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{target_user_id}</code>\n"
            success_text += f"üíé –ü–ª–∞–Ω: {plan_info['name']} ({plan_info['price']})\n"
            
            if plan_info['duration_days'] == -1:
                success_text += f"‚ôæÔ∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ù–∞–≤—Å–µ–≥–¥–∞"
            else:
                expires_at = datetime.now() + timedelta(days=plan_info['duration_days'])
                success_text += f"üìÖ –î–æ: {expires_at.strftime('%d.%m.%Y')}"
            
            bot.send_message(message.chat.id, success_text, parse_mode='HTML')
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.send_message(
                    target_user_id,
                    f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: <b>{plan_info['name']}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üöÄ",
                    parse_mode='HTML'
                )
            except:
                pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏!</b>",
                parse_mode='HTML'
            )
    
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\nID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /grant: {str(e)}")
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>",
            parse_mode='HTML'
        )


@bot.message_handler(commands=['bonus'])
def bonus_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bonus - –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤"""
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    try:
        parts = message.text.split()
        bonus_count = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if len(parts) > 1:
            bonus_count = int(parts[1])
        
        if bonus_count <= 0 or bonus_count > 50:
            bot.send_message(
                message.chat.id,
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤!</b>\n\n–î–æ–ø—É—Å—Ç–∏–º–æ: 1-50",
                parse_mode='HTML'
            )
            return
        
        success_count = user_manager.grant_bonus_to_all_users(bonus_count)
        
        bonus_text = f"""
üéÅ <b>–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!</b>

üí¨ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> +{bonus_count} —Å–æ–æ–±—â–µ–Ω–∏–π
üë§ <b>–ü–æ–ª—É—á–∏–ª–∏:</b> {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>
        """
        
        bot.send_message(message.chat.id, bonus_text, parse_mode='HTML')
        logger.info(f"üéÅ –ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∏—Å–ª–∏–ª +{bonus_count} –±–æ–Ω—É—Å–æ–≤ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/bonus [1-50]</code>",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /bonus: {str(e)}")
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>",
            parse_mode='HTML'
        )


@bot.message_handler(content_types=['photo'])
def photo_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —á–µ–∫–æ–≤)"""
    user_id = message.from_user.id
    
    photo_text = """
üì∏ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!</b>

‚úÖ –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.

‚è≥ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à –ø–ª–∞—Ç–µ–∂
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
‚Ä¢ –ü—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üïê <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> –¥–æ 24 —á–∞—Å–æ–≤

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...</i>
    """
    
    bot.send_message(user_id, photo_text, parse_mode='HTML', reply_markup=get_back_menu())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if ADMIN_ID:
        file_id = message.photo[-1].file_id
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω "1month" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        payment_id = subscription_manager.create_payment(user_id, "1month", file_id)
        
        user = user_manager.get_user(user_id)
        admin_text = f"""
üí∞ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>
‚Ä¢ ID: <code>{user_id}</code>
‚Ä¢ –ò–º—è: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ Username: @{user.get('username', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {SUBSCRIPTION_PLANS['1month']['name']} - {SUBSCRIPTION_PLANS['1month']['price']}

üì∏ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:</b>
        """
        
        bot.send_photo(
            ADMIN_ID, 
            file_id, 
            caption=admin_text, 
            parse_mode='HTML',
            reply_markup=get_admin_payment_menu(payment_id)
        )
    
    logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@bot.message_handler(func=lambda message: True)
def message_handler(message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user_text = message.text
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏
    if user_text and user_text.startswith('/'):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –æ—Ç–∑—ã–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if user_id == ADMIN_ID and user_id in admin_pending_actions:
        pending_action = admin_pending_actions[user_id]
        
        if pending_action['action'] == 'waiting_revoke_reason':
            target_user_id = pending_action['target_user_id']
            message_id = pending_action['message_id']
            reason = user_text.strip()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            del admin_pending_actions[user_id]
            
            # –û—Ç–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            if user_manager.revoke_subscription(target_user_id):
                target_user = user_manager.get_user(target_user_id)
                
                # –£—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É
                success_text = f"""
‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üÜî <b>ID:</b> <code>{target_user_id}</code>
‚úèÔ∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}

üí¨ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω</b>
                """
                
                bot.edit_message_text(
                    success_text, user_id, message_id, 
                    parse_mode='HTML', reply_markup=get_admin_menu()
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∑—ã–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏
                try:
                    bot.send_message(
                        target_user_id,
                        f"""
üö´ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞</b>

üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–æ–∑–≤–∞–ª –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É</b>

‚úèÔ∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}

üéÜ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ {DAILY_FREE_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å.

üí∏ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                        """,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
                    pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            else:
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏
                bot.edit_message_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏!</b>", 
                    user_id, message_id, parse_mode='HTML', reply_markup=get_admin_menu()
                )
            
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
    if user_id in active_ai_requests:
        bot.send_message(
            user_id,
            "‚è≥ <b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ!</b>\n\nü§ñ –Ø –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å.\n\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞, –∞ –∑–∞—Ç–µ–º –∑–∞–¥–∞–≤–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.</i>",
            parse_mode='HTML'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç
    if maintenance_mode:
        maintenance_text = """
‚öôÔ∏è <b>–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –†–ê–ë–û–¢–´</b> ‚öôÔ∏è

üëã –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!  

–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ—Ö–æ–¥—è—Ç <b>—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</b> üõ†  
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.  

üíé –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç –±–æ—Ç <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b> –≤—Å–µ–º –Ω–∞—á–∏—Å–ª–∏—Ç  
üéÅ +10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.  

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ üôèüöÄ
        """
        bot.send_message(user_id, maintenance_text, parse_mode='HTML', reply_markup=get_main_menu())
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_manager.update_user_info(
        user_id, 
        message.from_user.username, 
        message.from_user.first_name, 
        message.from_user.last_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not user_manager.can_send_message(user_id):
        user = user_manager.get_user(user_id)
        limit_text = f"""
‚ö°Ô∏è <b>–õ–ò–ú–ò–¢ –°–û–û–ë–©–ï–ù–ò–ô –ù–ê –°–ï–ì–û–î–ù–Ø –î–û–°–¢–ò–ì–ù–£–¢!</b> 

üìä <b>–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
üí¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{user['daily_messages']} –∏–∑ {DAILY_FREE_MESSAGES}</b> —Å–æ–æ–±—â–µ–Ω–∏–π
üïê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞: <b>—á–µ—Ä–µ–∑ 24 —á–∞—Å–∞</b>
‚è∞ –°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø: <b>–∑–∞–≤—Ç—Ä–∞ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è</b>

üíé <b>–ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê - –ë–ï–ó–õ–ò–ú–ò–¢–ù–û–ï –û–ë–©–ï–ù–ò–ï</b>

üî• <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:</b>
üìÖ <b>1 –º–µ—Å—è—Ü</b> ‚Üí <b>200‚Ç¥</b>
üìÜ <b>6 –º–µ—Å—è—Ü–µ–≤</b> ‚Üí <b>1000‚Ç¥</b> <i>(-17%)</i>
üóìÔ∏è <b>12 –º–µ—Å—è—Ü–µ–≤</b> ‚Üí <b>1800‚Ç¥</b> <i>(-25%)</i>
‚ôæÔ∏è <b>–ù–ê–í–°–ï–ì–î–ê</b> ‚Üí <b>3999‚Ç¥</b> <i>(-33%)</i>

üéÜ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–º–∏—É–º:</b>
‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–æ–ª—è–º AI
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üöÄ <b>–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!</b>
        """
        
        bot.send_message(
            user_id, 
            limit_text, 
            parse_mode='HTML', 
            reply_markup=get_buy_subscription_menu()
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    active_ai_requests.add(user_id)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    user_manager.increment_message_count(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_manager.add_to_history(user_id, "user", user_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = bot.send_message(
        user_id, 
        "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...", 
        parse_mode='HTML'
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è AI
        history = user_manager.get_history_for_ai(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = user_manager.get_ai_role(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
        ai_response = ai_client.chat_completion(history, user_role)
        
        if ai_response:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
            user_manager.add_to_history(user_id, "assistant", ai_response)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            bot.delete_message(user_id, processing_msg.message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
            bot.send_message(
                user_id, 
                ai_response, 
                parse_mode='HTML', 
                reply_markup=get_back_menu()
            )
        else:
            # –û—à–∏–±–∫–∞ AI
            bot.edit_message_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                user_id,
                processing_msg.message_id,
                reply_markup=get_back_menu()
            )
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        bot.edit_message_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            user_id,
            processing_msg.message_id,
            reply_markup=get_back_menu()
        )
    
    finally:
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        active_ai_requests.discard(user_id)
    
    logger.info(f"üí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text[:50]}...")


# Callback handlers
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤"""
    user_id = call.from_user.id
    data = call.data
    
    try:
        if data == "back_to_main":
            welcome_text = f"""
üéÜ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CortexaAI!</b>

üíé <b>–í–ê–® –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô AI –ü–û–ú–û–©–ù–ò–ö</b>

üöÄ <b>–ü–µ—Ä–µ–¥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üîπ <b>5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π AI</b> - –æ—Ç –¥—Ä—É–≥–∞ –¥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
üîπ <b>–£–º–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ</b> - –ø–æ–Ω–∏–º–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç
üîπ <b>–ü–æ–ª–Ω–∞—è –ø–∞–º—è—Ç—å</b> - –ø–æ–º–Ω—é –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
üîπ <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å

üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:</b>

‚ú® <i>–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏!</i>
            """
            bot.edit_message_text(
                welcome_text,
                user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_main_menu()
            )
        elif data == "profile":
            stats = user_manager.get_user_stats(user_id)
            current_role = user_manager.get_ai_role(user_id)
            role_info = AI_ROLES.get(current_role, AI_ROLES['cortex'])
            
            profile_text = f"""
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>

<b>–ò–º—è:</b> {stats['user_info']['first_name']}
<b>Username:</b> @{stats['user_info']['username']}
<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {stats['user_info']['registration_date']}

<b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {stats['activity']['total_messages']}
<b>–°–µ–≥–æ–¥–Ω—è:</b> {stats['activity']['daily_messages']}
<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {stats['subscription']}

üé≠ <b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å AI:</b> {role_info['name']}
            """
            bot.edit_message_text(profile_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_back_menu())
        
        elif data == "stats":
            stats = user_manager.get_user_stats(user_id)
            current_role = user_manager.get_ai_role(user_id)
            role_info = AI_ROLES.get(current_role, AI_ROLES['cortex'])
            
            stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>üë§ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{stats['activity']['total_messages']}</b>
‚Ä¢ AI –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{stats['activity']['ai_requests']}</b>
‚Ä¢ –°–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{stats['activity']['daily_messages']}</b>
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{stats['activity']['last_activity']}</b>

<b>üíé –ü–æ–¥–ø–∏—Å–∫–∞:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {stats['subscription']}

<b>üé≠ AI –†–æ–ª—å:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞: {role_info['name']}

<b>ü§ñ –°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ AI –ú–æ–¥–µ–ª—å: <b>Llama-3.3-70B-Instruct</b>
‚Ä¢ API: <b>Intelligence.io</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: <b>üü¢ –û–Ω–ª–∞–π–Ω</b>

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}</i>
            """
            bot.edit_message_text(stats_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_back_menu())
        
        elif data == "ai_chat":
            current_role = user_manager.get_ai_role(user_id)
            role_info = AI_ROLES.get(current_role, AI_ROLES['cortex'])
            
            chat_text = f"""
üí¨ <b>–ß–∞—Ç —Å Cortexa –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>

üé≠ <b>–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å:</b> {role_info['name']}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {role_info['description']}

ü§ñ –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é!

üìö –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

<b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"
‚Ä¢ "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É"
‚Ä¢ "–ü—Ä–∏–¥—É–º–∞–π —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ"
‚Ä¢ "–ü–æ–º–æ–≥–∏ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º"

‚ú® <i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</i>
            """
            bot.edit_message_text(chat_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_back_menu())
        
        elif data == "ai_roles":
            current_role = user_manager.get_ai_role(user_id)
            current_role_info = AI_ROLES.get(current_role, AI_ROLES['cortex'])
            
            roles_text = f"""
üé≠ <b>–í—ã–±–æ—Ä —Ä–æ–ª–∏ AI</b>

üéÜ <b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b> {current_role_info['name']}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {current_role_info['description']}

üîÑ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:</b>
            """
            
            for role_key, role_info in AI_ROLES.items():
                status = "üü¢" if role_key == current_role else ""
                roles_text += f"\n‚Ä¢ {role_info['name']} - {role_info['description']} {status}"
            
            roles_text += "\n\nüëâ <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –Ω–∏–∂–µ:</i>"
            
            bot.edit_message_text(roles_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_ai_roles_menu(current_role))
        
        elif data.startswith("set_role_"):
            new_role = data.replace("set_role_", "")
            if user_manager.set_ai_role(user_id, new_role):
                role_info = AI_ROLES[new_role]
                
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏
                user_manager.clear_history(user_id)
                
                success_text = f"""
üéâ <b>–†–æ–ª—å —Å–º–µ–Ω–µ–Ω–∞!</b>

üéÜ <b>–ù–û–í–ê–Ø –õ–ò–ß–ù–û–°–¢–¨ –ê–ö–¢–ò–í–ù–ê:</b>

üé≠ <b>–†–æ–ª—å:</b> {role_info['name']}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {role_info['description']}

üóëÔ∏è <b>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏</b>

üöÄ <b>–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é!</b>
                """
                bot.edit_message_text(success_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_back_menu())
            else:
                bot.edit_message_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏!</b>", 
                    user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_back_menu()
                )
        
        elif data == "clear_history":
            confirm_text = "üóëÔ∏è <b>–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é?</b>\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\nüìö –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å AI."
            bot.edit_message_text(confirm_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_confirm_clear_menu())
        
        elif data == "confirm_clear":
            if user_manager.clear_history(user_id):
                success_text = "‚úÖ <b>–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!</b>"
            else:
                success_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ."
            bot.edit_message_text(success_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_back_menu())
        
        elif data == "subscriptions":
            subs_text = f"""
üíé <b>–ü–æ–¥–ø–∏—Å–∫–∏</b>

üéÅ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> –ü–µ—Ä–µ–≤–æ–¥ + —Å–∫—Ä–∏–Ω—à–æ—Ç
            """
            bot.edit_message_text(subs_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_subscription_menu())
        
        elif data.startswith("buy_"):
            plan_key = data.replace("buy_", "")
            if plan_key in SUBSCRIPTION_PLANS:
                plan = SUBSCRIPTION_PLANS[plan_key]
                payment_text = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞: {plan['name']}</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan['price']}

üè¶ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>
üí≥ –ö–∞—Ä—Ç–∞: <code>5536 9138 0000 0000</code>
üè¶ –°–±–µ—Ä–±–∞–Ω–∫

üì∏ <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b>
1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å—é–¥–∞
3. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –≤ —á–∞—Ç</i>
                """
                bot.edit_message_text(payment_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_back_menu())
        
        elif data.startswith("approve_"):
            if user_id != ADMIN_ID:
                return
            payment_id = data.replace("approve_", "")
            payment = subscription_manager.get_payment(payment_id)
            if payment and subscription_manager.approve_payment(payment_id):
                user_manager.grant_subscription(payment["user_id"], payment["plan_key"])
                bot.edit_message_caption(
                    f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                    user_id, call.message.message_id, parse_mode='HTML'
                )
                bot.send_message(
                    payment["user_id"],
                    f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\nüíé {payment['plan_info']['name']} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.\n–ú–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!",
                    parse_mode='HTML', reply_markup=get_main_menu()
                )
        
        elif data.startswith("reject_"):
            if user_id != ADMIN_ID:
                return
            payment_id = data.replace("reject_", "")
            payment = subscription_manager.get_payment(payment_id)
            if payment and subscription_manager.reject_payment(payment_id):
                bot.edit_message_caption(
                    f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.",
                    user_id, call.message.message_id, parse_mode='HTML'
                )
                bot.send_message(
                    payment["user_id"],
                    f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    parse_mode='HTML', reply_markup=get_main_menu()
                )
        
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        elif data == "admin_panel":
            if user_id != ADMIN_ID:
                return
            users_count = len(user_manager.load_data())
            pending_payments = len([p for p in subscription_manager.load_payments().values() if p['status'] == 'pending'])
            
            admin_text = f"""
üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {users_count}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {pending_payments}

üõ†Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>
            """
            bot.edit_message_text(admin_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_admin_menu())
        
        elif data == "admin_users_list":
            if user_id != ADMIN_ID:
                return
            users_data = user_manager.load_data()
            if not users_data:
                bot.edit_message_text(
                    "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</b>", 
                    user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_admin_menu()
                )
                return
            
            users_text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users_data)})</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            bot.edit_message_text(
                users_text, user_id, call.message.message_id, 
                parse_mode='HTML', reply_markup=get_admin_users_menu(users_data)
            )
        
        elif data == "admin_grant_sub":
            if user_id != ADMIN_ID:
                return
            users_data = user_manager.load_data()
            if not users_data:
                bot.edit_message_text(
                    "üë• <b>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>", 
                    user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_admin_menu()
                )
                return
            
            grant_text = f"üíé <b>–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            bot.edit_message_text(
                grant_text, user_id, call.message.message_id, 
                parse_mode='HTML', reply_markup=get_admin_users_menu(users_data)
            )
        
        elif data == "admin_revoke_sub":
            if user_id != ADMIN_ID:
                return
            users_data = user_manager.load_data()
            if not users_data:
                bot.edit_message_text(
                    "üë• <b>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–∑—ã–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>", 
                    user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_admin_menu()
                )
                return
            
            revoke_text = f"üö´ <b>–û—Ç–∑—ã–≤ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:"
            bot.edit_message_text(
                revoke_text, user_id, call.message.message_id, 
                parse_mode='HTML', reply_markup=get_admin_users_with_subs_menu(users_data)
            )
        
        elif data == "admin_stats":
            if user_id != ADMIN_ID:
                return
            users_data = user_manager.load_data()
            pending_payments = len([p for p in subscription_manager.load_payments().values() if p['status'] == 'pending'])
            
            total_users = len(users_data)
            active_subscriptions = len([u for u in users_data.values() if u.get('subscription', {}).get('type') != 'free'])
            total_messages = sum(u.get('statistics', {}).get('total_messages', 0) for u in users_data.values())
            
            stats_text = f"""
üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: <b>{total_users}</b>
‚Ä¢ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{active_subscriptions}</b>
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: <b>{total_users - active_subscriptions}</b>

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{total_messages}</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{len(active_ai_requests)}</b>

üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{pending_payments}</b>

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>
            """
            bot.edit_message_text(stats_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_admin_menu())
        
        elif data == "admin_payments":
            if user_id != ADMIN_ID:
                return
            payments = subscription_manager.load_payments()
            pending = [p for p in payments.values() if p['status'] == 'pending']
            
            if not pending:
                payments_text = "üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏</b>\n\n‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π"
            else:
                payments_text = f"üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏ ({len(pending)} –æ–∂–∏–¥–∞—é—Ç)</b>\n\n"
                for payment in pending[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    user_data = user_manager.get_user(payment['user_id'])
                    name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    payments_text += f"‚Ä¢ {name} - {payment['plan_info']['name']}\n"
                if len(pending) > 5:
                    payments_text += f"\n<i>... –∏ –µ—â–µ {len(pending) - 5} –ø–ª–∞—Ç–µ–∂–µ–π</i>"
            
            bot.edit_message_text(payments_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_admin_menu())
        
        elif data == "admin_toggle_maintenance":
            if user_id != ADMIN_ID:
                return
            
            global maintenance_mode
            was_maintenance = maintenance_mode
            maintenance_mode = not maintenance_mode
            
            status_text = "–≤–∫–ª—é—á–µ–Ω" if maintenance_mode else "–≤—ã–∫–ª—é—á–µ–Ω"
            emoji = "‚öôÔ∏è" if maintenance_mode else "üõ†"
            
            # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö. —Ä–∞–±–æ—Ç - –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã
            bonus_users = 0
            if was_maintenance and not maintenance_mode:
                bonus_users = user_manager.grant_bonus_to_all_users(10)
                logger.info(f"üéÅ –ù–∞—á–∏—Å–ª–µ–Ω–æ +10 –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ {bonus_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
            maintenance_text = f"""
{emoji} <b>–†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç {status_text}</b>

üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {'ACTIVE' if maintenance_mode else 'DISABLED'}

üí¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
‚Ä¢ {'AI –∑–∞–ø—Ä–æ—Å—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã' if maintenance_mode else 'AI –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è +10 –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            """
            
            if bonus_users > 0:
                maintenance_text += f"\nüéÅ <b>–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã {bonus_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</b>"
            
            bot.edit_message_text(maintenance_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_admin_menu())
            
            logger.info(f"üîß –ê–¥–º–∏–Ω {user_id} {status_text} —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç")
        
        elif data.startswith("users_page_"):
            if user_id != ADMIN_ID:
                return
            page = int(data.replace("users_page_", ""))
            users_data = user_manager.load_data()
            users_text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users_data)})</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            bot.edit_message_text(
                users_text, user_id, call.message.message_id, 
                parse_mode='HTML', reply_markup=get_admin_users_menu(users_data, page)
            )
        
        elif data.startswith("revoke_page_"):
            if user_id != ADMIN_ID:
                return
            page = int(data.replace("revoke_page_", ""))
            users_data = user_manager.load_data()
            revoke_text = f"üö´ <b>–û—Ç–∑—ã–≤ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:"
            bot.edit_message_text(
                revoke_text, user_id, call.message.message_id, 
                parse_mode='HTML', reply_markup=get_admin_users_with_subs_menu(users_data, page)
            )
        
        elif data.startswith("select_user_"):
            if user_id != ADMIN_ID:
                return
            target_user_id = int(data.replace("select_user_", ""))
            target_user = user_manager.get_user(target_user_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω
            user_info_text = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

<b>–ò–º—è:</b> {target_user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
<b>Username:</b> @{target_user.get('username', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}
<b>ID:</b> <code>{target_user_id}</code>
<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {datetime.fromisoformat(target_user['registration_date']).strftime('%d.%m.%Y')}

<b>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> {target_user.get('subscription', {}).get('type', 'free')}
<b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {target_user.get('statistics', {}).get('total_messages', 0)}

üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:</b>
            """
            bot.edit_message_text(
                user_info_text, user_id, call.message.message_id, 
                parse_mode='HTML', reply_markup=get_subscription_plans_menu(target_user_id)
            )
        
        elif data.startswith("grant_plan_"):
            if user_id != ADMIN_ID:
                return
            parts = data.replace("grant_plan_", "").split("_")
            target_user_id = int(parts[0])
            plan_key = "_".join(parts[1:])
            
            if plan_key in SUBSCRIPTION_PLANS:
                if user_manager.grant_subscription(target_user_id, plan_key):
                    plan_info = SUBSCRIPTION_PLANS[plan_key]
                    target_user = user_manager.get_user(target_user_id)
                    
                    success_text = f"""
‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üÜî <b>ID:</b> <code>{target_user_id}</code>
üíé <b>–ü–ª–∞–Ω:</b> {plan_info['name']} ({plan_info['price']})

                    """
                    if plan_info['duration_days'] == -1:
                        success_text += "‚ôæÔ∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> –ù–∞–≤—Å–µ–≥–¥–∞"
                    else:
                        expires_at = datetime.now() + timedelta(days=plan_info['duration_days'])
                        success_text += f"üìÖ <b>–î–æ:</b> {expires_at.strftime('%d.%m.%Y')}"
                    
                    bot.edit_message_text(success_text, user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_admin_menu())
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        bot.send_message(
                            target_user_id,
                            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: <b>{plan_info['name']}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üöÄ",
                            parse_mode='HTML'
                        )
                    except:
                        pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
                else:
                    bot.edit_message_text(
                        "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏!</b>", 
                        user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_admin_menu()
                    )
            else:
                bot.edit_message_text(
                    "‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏!</b>", 
                    user_id, call.message.message_id, parse_mode='HTML', reply_markup=get_admin_menu()
                )
        
        elif data.startswith("revoke_select_"):
            if user_id != ADMIN_ID:
                return
            target_user_id = int(data.replace("revoke_select_", ""))
            target_user = user_manager.get_user(target_user_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏—á–∏–Ω—É
            user_info_text = f"""
üö´ <b>–û—Ç–∑—ã–≤ –ø–æ–¥–ø–∏—Å–∫–∏</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì± <b>Username:</b> @{target_user.get('username', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}
üÜî <b>ID:</b> <code>{target_user_id}</code>

üíé <b>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> {target_user.get('subscription', {}).get('type', 'free')}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {target_user.get('statistics', {}).get('total_messages', 0)}

‚úèÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∑—ã–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>

<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç —ç—Ç—É –ø—Ä–∏—á–∏–Ω—É –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏</i>
            """
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã
            admin_pending_actions[user_id] = {
                'action': 'waiting_revoke_reason',
                'target_user_id': target_user_id,
                'message_id': call.message.message_id
            }
            
            bot.edit_message_text(
                user_info_text, user_id, call.message.message_id, 
                parse_mode='HTML'
            )
        
        bot.answer_callback_query(call.id)
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {str(e)}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


# Flask webhook setup
@app.route('/', methods=['GET'])
def index():
    return "<h1>AI Telegram Bot</h1><p>Bot is running!</p>"

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        return 'Error', 403


def set_webhook():
    """Set up webhook for Railway deployment"""
    if WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL}/webhook"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        logger.info(f"‚úÖ Webhook set to: {webhook_url}")
    else:
        logger.warning("‚ö†Ô∏è WEBHOOK_URL not set, running in polling mode")


if __name__ == '__main__':
    logger.info("üöÄ Starting AI Telegram Bot...")
    
    # Test AI connection
    if ai_client.chat_completion([{"role": "user", "content": "Test"}]):
        logger.info("‚úÖ AI connection successful")
    else:
        logger.error("‚ùå AI connection failed")
    
    if WEBHOOK_URL:
        # Production mode with webhook
        set_webhook()
        app.run(host='0.0.0.0', port=PORT, debug=False)
    else:
        # Development mode with polling
        logger.info("üîÑ Starting polling mode...")
        bot.infinity_polling()
    
    def reset_subscription(self, user_id: int) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
        data = self.load_data()
        user_key = str(user_id)
        user = data.get(user_key, self.create_default_user(user_id))
        
        user["subscription"] = {
            "type": "free",
            "expires_at": None,
            "unlimited": False
        }
        
        data[user_key] = user
        return self.save_data(data)

    def upgrade_subscription(self, user_id: int, subscription_type: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
        data = self.load_data()
        user_key = str(user_id)
        user = data.get(user_key, self.create_default_user(user_id))
        
        if subscription_type not in SUBSCRIPTION_PLANS:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_type}")
            return False
        
        plan = SUBSCRIPTION_PLANS[subscription_type]
        
        if plan['duration_days'] == -1:
            user["subscription"] = {
                "type": subscription_type,
                "expires_at": None,
                "unlimited": True
            }
        else:
            expires_at = datetime.now() + timedelta(days=plan['duration_days'])
            user["subscription"] = {
                "type": subscription_type,
                "expires_at": expires_at.isoformat(),
                "unlimited": False
            }
        
        data[user_key] = user
        return self.save_data(data)

    def generate_subscription_url(self, user_id: int, subscription_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        if subscription_type not in SUBSCRIPTION_PLANS:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_type}")
            return "–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        
        plan = SUBSCRIPTION_PLANS[subscription_type]
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ URL
        
        return "https://example.com/pay"


def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    buttons = [
        [types.InlineKeyboardButton("üí¨ –ù–æ–≤—ã–π —á–∞—Ç", callback_data="new_chat"),
         types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
         types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history_confirm")],
        [types.InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
         types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ]
    
    for row in buttons:
        keyboard.row(*row)
    
    return keyboard

def create_chat_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    buttons = [
        [types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
         types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history_confirm"),
         types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    
    for row in buttons:
        keyboard.row(*row)
    
    return keyboard

def create_confirmation_menu(action_data: str):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    buttons = [
        types.InlineKeyboardButton("‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{action_data}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
    ]
    
    keyboard.row(*buttons)
    return keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_profile.update_user_info(user_id, username, first_name, last_name)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        history = chat_history.load_history(message.chat.id)
        
        welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –ß–∞—Ç-–ë–æ—Ç!</b> üéâ

üëã –ü—Ä–∏–≤–µ—Ç, {first_name or '–¥—Ä—É–≥'}!

ü§ñ –Ø –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
‚ú® –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!
üìö –ü–æ–º–Ω—é –Ω–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è

{f"üìñ –£ –Ω–∞—Å —É–∂–µ <b>{len(history)}</b> —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏" if history else "üìù –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É"}

<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:</i>
        """
        
        bot.send_message(
            message.chat.id, 
            welcome_text, 
            parse_mode='HTML',
            reply_markup=create_main_menu()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {str(e)}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

@bot.message_handler(commands=['help'])
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å
2Ô∏è‚É£ –Ø –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
4Ô∏è‚É£ –í—Å—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI:</b>
üß† –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
üìù –ü–æ–º–æ—â—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏
üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π
üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
üìö –û–±—É—á–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
üó£Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

<i>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä</i>
    """
    
    bot.send_message(
        message.chat.id,
        help_text,
        parse_mode='HTML',
        reply_markup=create_main_menu()
    )

@bot.message_handler(commands=['stats'])
def send_stats(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = user_profile.get_user_stats(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
        chat_stats = chat_history.get_chat_stats(chat_id)
        
        stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{user_stats['activity']['total_messages']}</b>
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ AI: <b>{user_stats['activity']['ai_requests']}</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: <b>{user_stats['activity']['avg_messages_per_day']}</b>
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: <b>{user_stats['activity']['week_messages']}</b>

<b>üí¨ –≠—Ç–æ—Ç —á–∞—Ç:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: <b>{chat_stats['total_messages']}</b>
‚Ä¢ –í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{chat_stats['user_messages']}</b>
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ AI: <b>{chat_stats['ai_messages']}</b>

<b>ü§ñ –°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ú–æ–¥–µ–ª—å AI: <b>Llama-3.3-70B-Instruct</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: <b>üü¢ –ê–∫—Ç–∏–≤–µ–Ω</b>
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{user_stats['activity']['last_activity']}</b>

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>
        """
        
        bot.send_message(
            message.chat.id,
            stats_text,
            parse_mode='HTML',
            reply_markup=create_main_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_stats: {str(e)}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def handle_new_chat(chat_id: int, message_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤—ã–π —á–∞—Ç'"""
    history = chat_history.load_history(chat_id)
    
    chat_text = f"""
üí¨ <b>–†–µ–∂–∏–º AI —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>

ü§ñ –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.
üìö –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

{f"üìñ –í –Ω–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —É–∂–µ <b>{len(history)}</b> —Å–æ–æ–±—â–µ–Ω–∏–π" if history else "üìù –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É"}

<b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"
‚Ä¢ "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É"
‚Ä¢ "–ü—Ä–∏–¥—É–º–∞–π —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ"
‚Ä¢ "–ü—Ä–æ–¥–æ–ª–∂–∏ –Ω–∞—à—É –±–µ—Å–µ–¥—É"

‚ú® <i>–ñ–¥—É –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!</i>
    """
    
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=chat_text,
        parse_mode='HTML',
        reply_markup=create_chat_menu()
    )

def handle_profile(chat_id: int, message_id: int, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'"""
    profile_text = user_profile.format_profile_info(user_id)
    
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=profile_text,
        parse_mode='HTML',
        reply_markup=create_main_menu()
    )

def handle_clear_history_confirm(chat_id: int, message_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    history = chat_history.load_history(chat_id)
    
    confirm_text = f"""
üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è.

üìä <b>–ß—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{len(history)}</b>
‚Ä¢ –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å AI
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–µ—Å–µ–¥

üí° <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
    """
    
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=confirm_text,
        parse_mode='HTML',
        reply_markup=create_confirmation_menu("clear_history")
    )

def handle_clear_history_execute(chat_id: int, message_id: int):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        success = chat_history.clear_history(chat_id)
        
        if success:
            clear_text = """
‚úÖ <b>–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!</b>

üóëÔ∏è –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã
üÜï –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
ü§ñ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –±–µ—Å–µ–¥–∞–º!

<i>–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ–±—Å—É–¥–∏—Ç—å?</i>
            """
        else:
            clear_text = """
‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</b>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
            """
        
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=clear_text,
            parse_mode='HTML',
            reply_markup=create_main_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_clear_history_execute: {str(e)}")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
    try:
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        # –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        bot.answer_callback_query(call.id)
        
        if call.data == "new_chat":
            handle_new_chat(chat_id, message_id)
            
        elif call.data == "profile":
            handle_profile(chat_id, message_id, user_id)
            
        elif call.data == "stats":
            handle_stats_callback(chat_id, message_id, user_id)
            
        elif call.data == "clear_history_confirm":
            handle_clear_history_confirm(chat_id, message_id)
            
        elif call.data == "confirm_clear_history":
            handle_clear_history_execute(chat_id, message_id)
            
        elif call.data == "about":
            handle_about(chat_id, message_id)
            
        elif call.data == "settings":
            handle_settings(chat_id, message_id)
            
        elif call.data == "main_menu":
            handle_main_menu(chat_id, message_id)
            
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {call.data}")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {call.data}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_query: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass

def handle_stats_callback(chat_id: int, message_id: int, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    try:
        user_stats = user_profile.get_user_stats(user_id)
        chat_stats = chat_history.get_chat_stats(chat_id)
        
        stats_text = f"""
üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{user_stats['activity']['total_messages']}</b>
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ AI: <b>{user_stats['activity']['ai_requests']}</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: <b>{user_stats['activity']['avg_messages_per_day']}</b>
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: <b>{user_stats['activity']['week_messages']}</b>

<b>üí¨ –≠—Ç–æ—Ç —á–∞—Ç:</b>
‚Ä¢ –í—Å–µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏: <b>{chat_stats['total_messages']}</b>
‚Ä¢ –í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{chat_stats['user_messages']}</b>
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ AI: <b>{chat_stats['ai_messages']}</b>

<b>ü§ñ –°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ AI –ú–æ–¥–µ–ª—å: <b>Llama-3.3-70B-Instruct</b>
‚Ä¢ API: <b>Intelligence.io</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: <b>üü¢ –û–Ω–ª–∞–π–Ω 24/7</b>

<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}</i>
        """
        
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=stats_text,
            parse_mode='HTML',
            reply_markup=create_main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_stats_callback: {str(e)}")

def handle_about(chat_id: int, message_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'"""
    about_text = f"""
‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>

ü§ñ <b>AI –ß–∞—Ç-–ë–æ—Ç</b> - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

<b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ üß† Llama-3.3-70B-Instruct
‚Ä¢ üêç Python + pyTelegramBotAPI
‚Ä¢ ‚òÅÔ∏è Intelligence.io API
‚Ä¢ üöÄ –î–µ–ø–ª–æ–π –Ω–∞ Railway
‚Ä¢ üìö –°–∏—Å—Ç–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
‚Ä¢ üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏

<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b>
‚Ä¢ üë®‚Äçüíª –°–æ–∑–¥–∞–Ω —Å –ª—é–±–æ–≤—å—é –∫ AI
‚Ä¢ üéØ –¶–µ–ª—å: –°–¥–µ–ª–∞—Ç—å AI –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Å–µ–º
‚Ä¢ üìß –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞

<b>–í–µ—Ä—Å–∏—è:</b> 2.0.0
<b>–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞:</b> 31.08.2025

<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ! üíô</i>
    """
    
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=about_text,
        parse_mode='HTML',
        reply_markup=create_main_menu()
    )

def handle_settings(chat_id: int, message_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
    settings_text = """
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ AI: <b>0.7</b>
‚Ä¢ üìè –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: <b>500–∫</b>
‚Ä¢ ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: <b>30 —Å–µ–∫</b>
‚Ä¢ üîÑ –ê–≤—Ç–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: <b>–í–∫–ª</b>
‚Ä¢ üìö –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤: <b>–í–∫–ª</b>

<b>–Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ üó£Ô∏è –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–æ–≤: <b>–†—É—Å—Å–∫–∏–π</b>
‚Ä¢ üåç –†–µ–≥–∏–æ–Ω: <b>RU</b>

<b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ üîê –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
‚Ä¢ üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
‚Ä¢ üö´ –ë–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

<i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã</i>

üí° <b>–°–æ–≤–µ—Ç:</b> –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤!
    """
    
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=settings_text,
        parse_mode='HTML',
        reply_markup=create_main_menu()
    )

def handle_main_menu(chat_id: int, message_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    welcome_text = """
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:

‚ú® <i>–Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!</i>
    """
    
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=welcome_text,
        parse_mode='HTML',
        reply_markup=create_main_menu()
    )

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        username = message.from_user.username
        user_message = message.text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile.increment_message_count(user_id)
        user_profile.increment_ai_requests(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        bot.send_chat_action(chat_id, 'typing')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.add_message(chat_id, "user", user_message, username)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ai_history = chat_history.get_history_for_ai(chat_id, limit=20)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
        ai_response = ai_client.get_smart_response(user_message, ai_history)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.add_message(chat_id, "assistant", ai_response)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É
        formatted_response = f"""
{ai_response}

<i>üí° –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ!</i>
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –º–µ–Ω—é
        bot.send_message(
            chat_id,
            formatted_response,
            parse_mode='HTML',
            reply_markup=create_chat_menu()
        )
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message[:50]}...")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        
        error_text = """
‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>

üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start

<i>–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!</i>
        """
        
        bot.send_message(
            chat_id,
            error_text,
            parse_mode='HTML',
            reply_markup=create_main_menu()
        )

# Flask –º–∞—Ä—à—Ä—É—Ç –¥–ª—è webhook (–¥–ª—è Railway –¥–µ–ø–ª–æ—è)
@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "OK"
    else:
        return "Bad Request", 400

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    try:
        total_users = len([f for f in os.listdir('profiles') if f.endswith('.json')]) if os.path.exists('profiles') else 0
        total_chats = len([f for f in os.listdir('history') if f.endswith('.json')]) if os.path.exists('history') else 0
    except:
        total_users = 0
        total_chats = 0
    
    return f"""
    <html>
        <head>
            <title>AI Telegram Bot</title>
            <style>
                body {{ font-family: Arial; text-align: center; margin: 50px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }}
                .container {{ background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; backdrop-filter: blur(10px); }}
                .status {{ color: #4CAF50; font-size: 24px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ AI Telegram Bot v2.0</h1>
                <p class="status">‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>
                <p>üöÄ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Railway</p>
                <p>üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}</p>
                <p>üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {total_chats}</p>
                <p>üß† AI –º–æ–¥–µ–ª—å: Llama-4-Maverick-17B-128E</p>
                <p>üìö –°–∏—Å—Ç–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏: –ê–∫—Ç–∏–≤–Ω–∞</p>
                <p><a href="https://t.me/YOUR_BOT_USERNAME" style="color: #FFD700;">üîó –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –≤ Telegram</a></p>
            </div>
        </body>
    </html>
    """

def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞"""
    if WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
        bot.remove_webhook()
        time.sleep(1)
        result = bot.set_webhook(url=webhook_url)
        if result:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
    else:
        logger.info("‚ö†Ô∏è WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω, –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI Telegram Bot v2.0...")
    logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å AI: {ai_client.model}")
    logger.info(f"‚ö° –ü–æ—Ä—Ç: {PORT}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI
    if ai_client.test_connection():
        logger.info("‚úÖ AI API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å AI API")
    
    if WEBHOOK_URL:
        # –†–µ–∂–∏–º webhook –¥–ª—è –¥–µ–ø–ª–æ—è
        logger.info("üåê –†–µ–∂–∏–º: Webhook (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)")
        set_webhook()
        app.run(host='0.0.0.0', port=PORT, debug=False)
    else:
        # –†–µ–∂–∏–º polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("üè† –†–µ–∂–∏–º: Polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        bot.polling(none_stop=True, interval=0, timeout=20)

if __name__ == '__main__':
    main()