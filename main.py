import asyncio
import logging
from aiohttp import web
from aiohttp.web_request import Request

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

import config
from keyboards import get_main_menu, get_media_menu, get_help_menu, get_admin_menu
from utils import message_counter, user_tracker, last_action_times, get_formatted_stats, SecurityUtils, TextFormatter

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±—É–¥—É—Ç—å –≤ utils.py


@dp.message(CommandStart())
async def start_handler(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        welcome_text = (
            "üá∫üá¶ <b>–í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ \"–î–Ω—ñ–ø—Ä–æ –û–ü–ï–†–ê–¢–ò–í–ù–ò–ô\"!</b> üá∫üá¶\n\n"
            "üì¢ –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üì∏ –ù–∞–¥—Å–∏–ª–∞—Ç–∏ —Ñ–æ—Ç–æ —Ç–∞ –≤—ñ–¥–µ–æ\n"
            "‚Ä¢ üì∞ –î—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–≤–∏–Ω–∞–º–∏ –ø—Ä–æ —Å—Ç–∞–Ω –≤—ñ–π–Ω–∏\n"
            "‚Ä¢ üö® –ü–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –ø—Ä–æ –ë–ø–õ–ê —Ç–∞ —ñ–Ω—à—ñ –∑–∞–≥—Ä–æ–∑–∏\n"
            "‚Ä¢ üìç –í–∫–∞–∑—É–≤–∞—Ç–∏ –∫—É–¥–∏ —â–æ –ª–µ—Ç–∏—Ç—å\n\n"
            "‚ö° <b>–†–∞–∑–æ–º –º–∏ —Å–∏–ª—å–Ω—ñ—à—ñ!</b> ‚ö°\n\n"
            "üëá <i>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:</i>"
        )
        
        keyboard = get_main_menu()
        await message.answer(welcome_text, reply_markup=keyboard)
        
        logger.info(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message.from_user.id} (@{message.from_user.username})")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ start_handler: {e}")
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@dp.message(Command("help"))
async def help_handler(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help"""
    try:
        help_text = (
            "üÜò <b>–î–æ–≤—ñ–¥–∫–∞ - –î–Ω—ñ–ø—Ä–æ –û–ü–ï–†–ê–¢–ò–í–ù–ò–ô</b>\n\n"
            "üîπ <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:</b>\n\n"
            "1Ô∏è‚É£ <b>–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–¥—ñ–∞:</b>\n"
            "   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ\n"
            "   ‚Ä¢ –î–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å –¥–æ –º–µ–¥—ñ–∞\n"
            "   ‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–∏—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
            "2Ô∏è‚É£ <b>–¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n"
            "   ‚Ä¢ –ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤–∏–Ω—É –∞–±–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\n"
            "   ‚Ä¢ –í–∫–∞–∂—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é, —è–∫—â–æ —Ü–µ –≤–∞–∂–ª–∏–≤–æ\n"
            "   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–∑–∞—Ü—ñ—ó\n\n"
            "3Ô∏è‚É£ <b>–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:</b>\n"
            "   ‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏\n"
            "   ‚Ä¢ üìã –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏\n"
            "   ‚Ä¢ ‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è - –ø—Ä–æ –±–æ—Ç —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∏\n\n"
            "‚ö†Ô∏è <b>–í–∞–∂–ª–∏–≤–æ:</b> –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é!"
        )
        
        keyboard = get_help_menu()
        await message.answer(help_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ help_handler: {e}")


@dp.message(Command("admin"))
async def admin_handler(message: types.Message):
    """–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ.")
        return
        
    try:
        admin_text = (
            "üëë <b>–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {message_count['total']}\n"
            f"‚Ä¢ –°—å–æ–≥–æ–¥–Ω—ñ: {message_count['today']}\n\n"
            "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:</b>"
        )
        
        keyboard = get_admin_menu()
        await message.answer(admin_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_handler: {e}")


@dp.message(lambda message: message.content_type in ['photo', 'video'])
async def media_handler(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ —Ç–∞ –≤—ñ–¥–µ–æ"""
    try:
        message_counter.increment()
        user_tracker.add_user(message.from_user.id)
        
        media_type = "üì∏ –§–æ—Ç–æ" if message.content_type == 'photo' else "üé• –í—ñ–¥–µ–æ"
        caption = message.caption or "–ë–µ–∑ –æ–ø–∏—Å—É"
        
        response_text = (
            f"‚úÖ <b>{media_type} –æ—Ç—Ä–∏–º–∞–Ω–æ!</b>\n\n"
            f"üë§ –í—ñ–¥: @{message.from_user.username or '–ê–Ω–æ–Ω—ñ–º'}\n"
            f"üìù –û–ø–∏—Å: {caption}\n"
            f"üïê –ß–∞—Å: {message.date.strftime('%H:%M:%S')}\n\n"
            "üì¢ <b>–î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é!</b>"
        )
        
        keyboard = get_media_menu()
        await message.answer(response_text, reply_markup=keyboard)
        
        # –õ–æ–≥ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logger.info(f"–ú–µ–¥—ñ–∞ –≤—ñ–¥ {message.from_user.id}: {media_type}, –æ–ø–∏—Å: {caption}")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        if config.ADMIN_ID and message.from_user.id != config.ADMIN_ID:
            try:
                admin_text = (
                    f"üì® <b>–ù–æ–≤–µ {media_type.lower()}</b>\n\n"
                    f"üë§ –í—ñ–¥: @{message.from_user.username or '–ê–Ω–æ–Ω—ñ–º'} (ID: {message.from_user.id})\n"
                    f"üìù –û–ø–∏—Å: {caption}"
                )
                await bot.send_message(config.ADMIN_ID, admin_text)
                
                # –ü–µ—Ä–µ—Å–∏–ª–∫–∞ –º–µ–¥—ñ–∞ –∞–¥–º—ñ–Ω—É
                if message.content_type == 'photo':
                    await bot.send_photo(config.ADMIN_ID, message.photo[-1].file_id, caption=admin_text)
                else:
                    await bot.send_video(config.ADMIN_ID, message.video.file_id, caption=admin_text)
                    
            except Exception as admin_error:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {admin_error}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ media_handler: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –º–µ–¥—ñ–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@dp.message()
async def text_handler(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        message_counter.increment()
        user_tracker.add_user(message.from_user.id)
        
        text_content = message.text
        
        response_text = (
            "‚úÖ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ!</b>\n\n"
            f"üë§ –í—ñ–¥: @{message.from_user.username or '–ê–Ω–æ–Ω—ñ–º'}\n"
            f"üìÑ –¢–µ–∫—Å—Ç: {text_content[:100]}{'...' if len(text_content) > 100 else ''}\n"
            f"üïê –ß–∞—Å: {message.date.strftime('%H:%M:%S')}\n\n"
            "üì¢ <b>–î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é!</b>"
        )
        
        keyboard = get_media_menu()
        await message.answer(response_text, reply_markup=keyboard)
        
        logger.info(f"–¢–µ–∫—Å—Ç –≤—ñ–¥ {message.from_user.id}: {text_content[:50]}...")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        if config.ADMIN_ID and message.from_user.id != config.ADMIN_ID:
            try:
                admin_text = (
                    f"üìù <b>–ù–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n\n"
                    f"üë§ –í—ñ–¥: @{message.from_user.username or '–ê–Ω–æ–Ω—ñ–º'} (ID: {message.from_user.id})\n"
                    f"üìÑ –¢–µ–∫—Å—Ç: {text_content}"
                )
                await bot.send_message(config.ADMIN_ID, admin_text)
            except Exception as admin_error:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {admin_error}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ text_handler: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@dp.callback_query()
async def callback_handler(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö callback –∑–∞–ø–∏—Ç—ñ–≤"""
    try:
        await callback.answer()  # –®–≤–∏–¥–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∑–Ω—è—Ç—Ç—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
        
        data = callback.data
        
        if data == "main_menu":
            welcome_text = (
                "üá∫üá¶ <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é - –î–Ω—ñ–ø—Ä–æ –û–ü–ï–†–ê–¢–ò–í–ù–ò–ô</b> üá∫üá¶\n\n"
                "üì¢ –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:"
            )
            keyboard = get_main_menu()
            await callback.message.edit_text(welcome_text, reply_markup=keyboard)
            
        elif data == "statistics":
            stats_text = get_formatted_stats() + "\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ"
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback.message.edit_text(stats_text, reply_markup=back_keyboard)
            
        elif data == "recent_messages":
            stats = message_counter.get_stats()
            user_stats = user_tracker.get_stats()
            recent_text = (
                "üìã <b>–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n\n"
                "üïê <i>–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:</i>\n"
                f"‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {stats['today']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {user_stats['active_today']}\n\n"
                "üìä <i>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞—î!</i>\n\n"
                "üí° <i>–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>"
            )
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback.message.edit_text(recent_text, reply_markup=back_keyboard)
            
        elif data == "info":
            info_text = (
                "‚ÑπÔ∏è <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç</b>\n\n"
                "ü§ñ <b>–î–Ω—ñ–ø—Ä–æ –û–ü–ï–†–ê–¢–ò–í–ù–ò–ô</b> üá∫üá¶\n\n"
                "üìã <b>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\n"
                "–ó–±—ñ—Ä —Ç–∞ –ø–æ—à–∏—Ä–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–¥—ñ—ó –≤ –î–Ω—ñ–ø—Ä—ñ —Ç–∞ –æ–±–ª–∞—Å—Ç—ñ\n\n"
                "üîß <b>–§—É–Ω–∫—Ü—ñ—ó:</b>\n"
                "‚Ä¢ –ü—Ä–∏–π–æ–º —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤\n"
                "‚Ä¢ –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"
                "‚Ä¢ –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó\n\n"
                "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏:</b>\n"
                "‚Ä¢ –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: @admin\n"
                "‚Ä¢ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó: –Ω–∞–ø–∏—à—ñ—Ç—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n"
                "‚ö° <b>–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!</b> üá∫üá¶"
            )
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback.message.edit_text(info_text, reply_markup=back_keyboard)
            
        elif data == "send_new":
            send_text = (
                "üì§ <b>–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n\n"
                "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ —Ç–µ–∫—Å—Ç\n"
                "üìù –î–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å –¥–æ –º–µ–¥—ñ–∞\n"
                "üìç –í–∫–∞–∂—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ\n\n"
                "‚ö° <i>–û—á—ñ–∫—É—é –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...</i>"
            )
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback.message.edit_text(send_text, reply_markup=back_keyboard)
            
        elif data == "help":
            help_text = (
                "üÜò <b>–î–æ–ø–æ–º–æ–≥–∞</b>\n\n"
                "‚ùì <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>\n\n"
                "1Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –∑ –æ–ø–∏—Å–æ–º\n"
                "2Ô∏è‚É£ –ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
                "3Ô∏è‚É£ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó\n\n"
                "üí° <b>–ü–æ—Ä–∞–¥–∏:</b>\n"
                "‚Ä¢ –ë—É–¥—å—Ç–µ —Ç–æ—á–Ω—ñ –≤ –æ–ø–∏—Å–∞—Ö\n"
                "‚Ä¢ –í–∫–∞–∑—É–π—Ç–µ —á–∞—Å —Ç–∞ –º—ñ—Å—Ü–µ\n"
                "‚Ä¢ –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\n\n"
                "‚ö†Ô∏è <b>–ë–µ–∑–ø–µ–∫–∞:</b> –ù–µ —Ä–æ–∑–≥–æ–ª–æ—à—É–π—Ç–µ –≤—ñ–π—Å—å–∫–æ–≤—É —Ç–∞—î–º–Ω–∏—Ü—é!"
            )
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback.message.edit_text(help_text, reply_markup=back_keyboard)
            
        # –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó
        elif data == "admin_stats":
            if callback.from_user.id != config.ADMIN_ID:
                await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
                return
                
            stats = message_counter.get_stats()
            user_stats = user_tracker.get_stats()
            admin_stats = (
                "üëë <b>–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ê–¥–º—ñ–Ω)</b>\n\n"
                f"üìä –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {stats['total']}\n"
                f"‚Ä¢ –°—å–æ–≥–æ–¥–Ω—ñ: {stats['today']}\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {user_stats['total_users']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ: {user_stats['active_today']}\n\n"
                f"üîß –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π\n"
                f"‚Ä¢ Webhook: ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ\n"
                f"‚Ä¢ –õ–æ–≥—É–≤–∞–Ω–Ω—è: ‚úÖ –ü—Ä–∞—Ü—é—î\n\n"
                f"üìà –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: –í—ñ–¥–º—ñ–Ω–Ω–æ"
            )
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
            await callback.message.edit_text(admin_stats, reply_markup=back_keyboard)
            
        elif data == "admin_broadcast":
            if callback.from_user.id != config.ADMIN_ID:
                await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
                return
                
            broadcast_text = (
                "üì¢ <b>–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å</b>\n\n"
                "üöß <i>–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ</i>\n\n"
                "üîú –ù–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å:\n"
                "‚Ä¢ –ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞\n"
                "‚Ä¢ –¢–∞—Ä–≥–µ—Ç–∏–Ω–≥ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö\n"
                "‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–æ–∫\n\n"
                "üí° –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!"
            )
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
            await callback.message.edit_text(broadcast_text, reply_markup=back_keyboard)
            
        else:
            await callback.answer("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ callback_handler: {e}")
        await callback.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞", show_alert=True)


async def on_startup():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
    try:
        if config.WEBHOOK_URL:
            webhook_url = f"{config.WEBHOOK_URL}{config.WEBHOOK_PATH}"
            await bot.set_webhook(webhook_url)
            logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
        else:
            logger.info("–ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º—ñ")
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
        if config.ADMIN_ID:
            try:
                await bot.send_message(
                    config.ADMIN_ID, 
                    "ü§ñ <b>–ë–æ—Ç \"–î–Ω—ñ–ø—Ä–æ –û–ü–ï–†–ê–¢–ò–í–ù–ò–ô\" –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    "‚úÖ –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å\n"
                    "üì° –ì–æ—Ç–æ–≤–∏–π –¥–æ –ø—Ä–∏–π–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
                )
            except:
                pass
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")


async def on_shutdown():
    """–û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ"""
    try:
        await bot.delete_webhook()
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ: {e}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    if config.WEBHOOK_URL:
        # –†–µ–∂–∏–º webhook –¥–ª—è Railway
        app = web.Application()
        
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
        )
        webhook_requests_handler.register(app, path=config.WEBHOOK_PATH)
        
        setup_application(app, dp, bot=bot)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è startup/shutdown
        async def startup_handler(app):
            await on_startup()
            
        async def cleanup_handler(app):
            await on_shutdown()
            
        app.on_startup.append(startup_handler)
        app.on_cleanup.append(cleanup_handler)
        
        web.run_app(app, host=config.WEBAPP_HOST, port=config.WEBAPP_PORT)
        
    else:
        # –†–µ–∂–∏–º polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        async def polling():
            await on_startup()
            try:
                await dp.start_polling(bot)
            finally:
                await on_shutdown()
        
        asyncio.run(polling())


if __name__ == "__main__":
    main()